# Generated by Django 3.2 on 2021-04-26 10:09

from django.db import migrations
from django.core.management import call_command

from rest_framework import serializers

"""
Custom migration to create initial "historical records" for StockItem objects...

Here, we go "backwards" in time, and simply adjust the 
"""


def create_history(apps, schema_editor):

    """
    Exctract *all* StockItem objects from the database
    """

    # Database model references
    StockItem = apps.get_model('stock', 'stockitem')
    StockItemTracking = apps.get_model('stock', 'stockitemtracking')
    HistoricalStockItem = apps.get_model('stock', 'historicalstockitem')

    class StockItemSerializer(serializers.ModelSerializer):

        class Meta:
            model = StockItem
            fields = '__all__'

    for item in StockItem.objects.all():

        # Extract all "StockItemTracking" instances for this StockItem record
        tracking = StockItemTracking.objects.filter(item__id=item.id).order_by('date')

        # Extract all "HistoricalStockItem" instances for this StockItem record
        history = HistoricalStockItem.objects.filter(id=item.id)

        # The item should *not* have any history at this point,
        # as the historical table has only just been created...
        if history.count() > 0:
            history.all().delete()
            history = HistoricalStockItem.objects.filter(id=item.id)

        # Create a "history" entry which matches each existing "tracking" entry

        # First, serialize the original object
        data = StockItemSerializer(item).data

        for idx, record in enumerate(tracking.all()):
            """
            There is limited information available in the StockItemTracking model!

            - date -> maps to the "history_date" field
            - quantity -> maps to the "quantity" field
            - title -> 
            - notes -> maps to the "history_change_reason" field
            - user -> maps to the "history_user_id" field

            Additionally, we should set the following fields:

            - history_type -> '+' for create, '~' for update
            """
            
            data['quantity'] = record.quantity

            data['history_date'] = record.date
            data['history_change_reason'] = record.notes
            
            data['history_type'] = '+' if idx == 0 else '~'

            data['id'] = item.id

            HistoricalStockItem.objects.create(**data)

        print(f"Item: {item.part.name}")
        print(f"Tracking: {tracking.count()}")
        print(f"History: {history.count()}")

        print("data:")
        print(data)

        # TODO- DELETE ME!!
        if tracking.count() > 0:
            break


def uncreate_history(apps, schema_editor):
    """
    Reverse data migration
    """
    
    print("Reversing migration")
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('stock', '0060_historicalstockitem'),
    ]

    operations = [
        migrations.RunPython(create_history, reverse_code=uncreate_history)
    ]
