# Generated by Django 3.0.7 on 2020-10-19 18:20

import InvenTree.fields
import InvenTree.validators
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import markdownx.models
import mptt.fields
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        ('stock', '0052_stockitem_is_building'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('company', '0023_auto_20200808_0715'),
        ('part', '0051_bomitem_optional'),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalPart',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(help_text='Part name', max_length=100, validators=[InvenTree.validators.validate_part_name])),
                ('is_template', models.BooleanField(default=False, help_text='Is this part a template part?')),
                ('description', models.CharField(help_text='Part description', max_length=250)),
                ('keywords', models.CharField(blank=True, help_text='Part keywords to improve visibility in search results', max_length=250, null=True)),
                ('IPN', models.CharField(blank=True, help_text='Internal Part Number', max_length=100, null=True, validators=[InvenTree.validators.validate_part_ipn])),
                ('revision', models.CharField(blank=True, help_text='Part revision or version number', max_length=100, null=True)),
                ('link', InvenTree.fields.InvenTreeURLField(blank=True, help_text='Link to extenal URL', null=True)),
                ('image', models.TextField(blank=True, max_length=100, null=True)),
                ('minimum_stock', models.PositiveIntegerField(default=0, help_text='Minimum allowed stock level', validators=[django.core.validators.MinValueValidator(0)])),
                ('units', models.CharField(blank=True, default='', help_text='Stock keeping units for this part', max_length=20, null=True)),
                ('assembly', models.BooleanField(default=False, help_text='Can this part be built from other parts?', verbose_name='Assembly')),
                ('component', models.BooleanField(default=True, help_text='Can this part be used to build other parts?', verbose_name='Component')),
                ('trackable', models.BooleanField(default=False, help_text='Does this part have tracking for unique items?')),
                ('purchaseable', models.BooleanField(default=True, help_text='Can this part be purchased from external suppliers?')),
                ('salable', models.BooleanField(default=False, help_text='Can this part be sold to customers?')),
                ('active', models.BooleanField(default=True, help_text='Is this part active?')),
                ('virtual', models.BooleanField(default=False, help_text='Is this a virtual part, such as a software product or license?')),
                ('notes', markdownx.models.MarkdownxField(blank=True, help_text='Part notes - supports Markdown formatting', null=True)),
                ('bom_checksum', models.CharField(blank=True, help_text='Stored BOM checksum', max_length=128)),
                ('bom_checked_date', models.DateField(blank=True, null=True)),
                ('creation_date', models.DateField(blank=True, editable=False, null=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('bom_checked_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('category', mptt.fields.TreeForeignKey(blank=True, db_constraint=False, help_text='Part category', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='part.PartCategory')),
                ('creation_user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('default_location', mptt.fields.TreeForeignKey(blank=True, db_constraint=False, help_text='Where is this item normally stored?', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='stock.StockLocation')),
                ('default_supplier', models.ForeignKey(blank=True, db_constraint=False, help_text='Default supplier part', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='company.SupplierPart')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('responsible', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('variant_of', models.ForeignKey(blank=True, db_constraint=False, help_text='Is this part a variant of another part?', limit_choices_to={'active': True, 'is_template': True}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='part.Part')),
            ],
            options={
                'verbose_name': 'historical Part',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
